import request from 'supertest';
import { app } from '../../app';
import mongoose from 'mongoose';
import { Ticket  } from '../../models/ticket';
import { Order , OrderStatus  } from '../../models/order';
import { natsWrapper } from '../../nats-wrapper';

// it('returns an error if ticket is not existed ', async () => {
//    const ticketId = mongoose.Types.ObjectId(); 
//    await request(app)
//    .post('/api/orders')
//    .set('Cookie', global.signin())
//    .send({  ticketId  })
//    .expect(404);
// });

// it('returns an error if ticket is reserved ', async () => {
//   const ticket = Ticket.build({ 
//     title : 'test 111', 
//     price:23
//   }); 
//   await ticket.save(); 

//   const order = Order.build({
//     ticket, 
//     userId: 'dafeda', 
//     status: OrderStatus.Created,
//     expireAt: new Date() 
//   })
//   await order.save(); 

//   await request(app)
//     .post('/api/orders')
//     .set('Cookie', global.signin())
//     .send({  ticketId : ticket.id })
//     .expect(400);
 
// });

// it('ticket is reserved ', async () => {
//   const ticket = Ticket.build({ 
//     title : 'test 111', 
//     price:23
//   }); 
//   await ticket.save(); 

//   await request(app)
//     .post('/api/orders')
//     .set('Cookie', global.signin())
//     .send({  ticketId : ticket.id })
//     .expect(201);
// });

it('emit order create event' , async () => { 
  const ticket = Ticket.build({ 
    title : 'test 111', 
    price:23
  }); 
  await ticket.save(); 

  await request(app)
    .post('/api/orders')
    .set('Cookie', global.signin())
    .send({  ticketId : ticket.id })
    .expect(201);

   expect( natsWrapper.client.publish).toHaveBeenCalled();

})
 
