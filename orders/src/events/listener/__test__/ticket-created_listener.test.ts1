import { Message } from 'node-nats-streaming';
import { natsWrapper } from "../../../nats-wrapper";
import { TicketCreatedListener } from "../ticket-created-listener";
import { TicketCreatedEvnet } from "@goodmanzticket/common";
import mongoose from 'mongoose';
import { Ticket} from '../../../models/ticket';

const setup=async() => { 
    const listener = new TicketCreatedListener(natsWrapper.client); 
    const data: TicketCreatedEvnet['data']= { 
        version: 0 , 
        id: new mongoose.Types.ObjectId().toHexString(),
        title : 'concert', 
        price : 10 , 
        userId:  new mongoose.Types.ObjectId().toHexString() 
    }
    // @ts-ignore
    const msg: Message = { 
        ack: jest.fn() 
    };

    return { listener, data, msg};
}

it ( 'Created and save a ticket ' , async () => { 
    //cereate instance listener 
    const {listener , data, msg} = await setup(); 
    // create face event 
    await listener.onMessage(data, msg)
    
    const ticket = await Ticket.findById(data.id);
    expect(ticket).toBeDefined(); 
    expect(ticket!.title).toEqual(data.title);
    expect(ticket!.price).toEqual(data.price);

});

it('Ack the msg' , async () => {
    const {listener , data, msg} = await setup(); 
    await listener.onMessage( data, msg);
    expect (msg.ack).toHaveBeenCalled(); 
    
});

