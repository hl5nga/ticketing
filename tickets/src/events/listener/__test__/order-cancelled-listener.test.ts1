import {  OrderCancelledEvent, OrderStatus } from  '@goodmanzticket/common'
import { OrderCancelledListener } from '../order-cancelled-listener'
import { natsWrapper } from "../../../nats-wrapper"
import { Message } from 'node-nats-streaming'
import mongoose from 'mongoose'
import { Ticket } from '../../../models/ticket'

const setup =async () => { 
    const listener = new OrderCancelledListener(natsWrapper.client)
    const orderId = mongoose.Types.ObjectId().toHexString(); 
    const ticket = Ticket.build({ 
        title: 'concert', 
        price : 99, 
        userId : 'asda'
    })
    ticket.set({ orderId  })
    await ticket.save(); 

    const data : OrderCancelledEvent ['data'] = { 
        id: orderId ,  
        version: 0, 
        ticket: {
            id:  ticket.id, 
            price : ticket.price, 
        }
    };
    // @ts-ignore
    const msg: Message = { 
        ack: jest.fn()
    };
    return { listener, ticket, data, orderId,  msg};
}

it( 'set usere id of the ticket ', async() => { 
    const {  listener, ticket, data,orderId ,  msg}  = await setup(); 
    await listener.onMessage(data, msg);

    const updatedTicket = await Ticket.findById(ticket.id);
    expect(updatedTicket!.orderId).not.toBeDefined();
    expect(msg.ack).toHaveBeenCalled();
    expect(natsWrapper.client.publish).toHaveBeenCalled();
});
 