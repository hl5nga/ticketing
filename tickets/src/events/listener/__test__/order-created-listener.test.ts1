import {  OrderCreatedEvent, OrderStatus } from  '@goodmanzticket/common'
import { OrderCreatedListener } from "../order-created-listener"
import { natsWrapper } from "../../../nats-wrapper"
import { Message } from 'node-nats-streaming'
import mongoose from 'mongoose'
import { Ticket } from '../../../models/ticket'

const setup =async () => { 
    const listener = new OrderCreatedListener(natsWrapper.client)

    const ticket = Ticket.build({ 
        title: 'concert', 
        price : 99, 
        userId : 'asda'
    })

    await ticket.save(); 

    const data : OrderCreatedEvent ['data'] = { 
        id: mongoose.Types.ObjectId().toHexString(),
        version: 0, 
        status: OrderStatus.Created, 
        userId: 'dafasd',
        expiresAt:'dadafsed',
        ticket: {
            id:  ticket.id, 
            price: ticket.price 
        }
    };
    // @ts-ignore
    const msg: Message = { 
        ack: jest.fn()
    };
    return { listener, ticket, data, msg};
}

it( 'set usere id of the ticket ', async() => { 
    const {  listener, ticket, data, msg}  = await setup(); 
    await listener.onMessage(data, msg);
    const updatedTicket = await Ticket.findById(ticket.id);
    expect(updatedTicket!.orderId).toEqual(data.id);
});

it( 'Ack the message ', async() => { 
    const {  listener, ticket, data, msg}  = await setup(); 
    await listener.onMessage(data, msg);
    

    expect(msg.ack).toHaveBeenCalled();
});

it('publish with update evenmt ' , async() => { 
    const {  listener, ticket, data, msg}  = await setup(); 
  
    await listener.onMessage(data, msg);
    
    expect(natsWrapper.client.publish).toHaveBeenCalled();
    // @ts-ignore
    console.log(natsWrapper.client.publish.mock.calls)
})